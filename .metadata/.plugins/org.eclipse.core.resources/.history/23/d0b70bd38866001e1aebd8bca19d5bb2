package com.lcwd.user.service.imple;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.lcwd.user.service.Repositories.UserRepository;
import com.lcwd.user.service.UserServices.UserServices;
import com.lcwd.user.service.entities.Hotel;
import com.lcwd.user.service.entities.Rating;
import com.lcwd.user.service.entities.User;
import com.lcwd.user.service.exception.ResouceNotFound;

import ch.qos.logback.classic.Logger;

@Service 
public class UserServiceImple implements UserServices {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	private Logger logger= (Logger) LoggerFactory.getLogger(UserServiceImple.class);
	@Override
	public User saveUser(User user) {
		//generate unique used id every time 
		String randomUserId =   UUID.randomUUID().toString();
		user.setUserId(randomUserId);
		return userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		return userRepository.findAll();
	}

	@Override
	public User getUser(String userId) {
		// TODO Auto-generated method stub
		User user = userRepository.findById(userId).orElseThrow(()-> new ResouceNotFound("userId doesnot found"+userId));
		
		Rating[] ratingsOfUsers = restTemplate.getForObject("http://RATINGSERVICE/ratings/users/"+user.getUserId(), Rating[].class);
		logger.info("{}",ratingsOfUsers);
				
		 List<Rating> ratings = Arrays.stream(ratingsOfUsers).toList();
		List<Rating> ratingList = ratings.stream().map(rating->{
		ResponseEntity<Hotel>forEntity=restTemplate.getForEntity("http://HOTELSERVICE/hotels/"+rating.getHotelId(),Hotel.class);
		Hotel hotel = forEntity.getBody();
		logger.info("get status code for the entity ",forEntity.getStatusCode());
			
		rating.setHotels(hotel);
		
		return rating;
		}).collect(Collectors.toList());
		
		user.setRatings(ratingList);
		return user;
	}

	
}
